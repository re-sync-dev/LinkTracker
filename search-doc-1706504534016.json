[{"title":"Examples","type":0,"sectionRef":"#","url":"/LinkTracker/docs/examples/","content":"Examples Invite TestersPromo CodeCreator code","keywords":""},{"title":"Invite testers","type":0,"sectionRef":"#","url":"/LinkTracker/docs/examples/invite-testers","content":"","keywords":""},{"title":"Server​","type":1,"pageTitle":"Invite testers","url":"/LinkTracker/docs/examples/invite-testers#server","content":"--[==[ Copyright (C) Re-Sync - All Rights Reserved [init.server.lua]: An example of how you could go about inviting testers to your game. [Author(s)]: Vyon - https://github.com/Vyon --]==] -- Services: local Players = game:GetService(&quot;Players&quot;) local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) -- Modules: local LinkTracker = require(Path.To.LinkTracker) -- Types: type LinkData = LinkTracker.LinkData type CustomLinkData = LinkData &amp; { AllowedUsers: { number }, } -- Locals: local CreateLink = Instance.new(&quot;RemoteFunction&quot;) CreateLink.Name = &quot;CreateLink&quot; CreateLink.Parent = ReplicatedStorage -- Variables: local RateLimit = {} -- Functions: local function OnPlayerAdded(Player: Player) LinkTracker:OnJoin(Player, { InvalidLink = function(Player: Player) if Player.UserId == game.CreatorId then return end Player:Kick(&quot;The link you joined from is invalid.&quot;) end, UsableLink = function(Player: Player, LinkData: CustomLinkData) local Index = table.find(LinkData.AllowedUsers, Player.UserId) if not Index then return false end return true end, ConsumeLink = function(Player: Player, LinkData: CustomLinkData) local Index = table.find(LinkData.AllowedUsers, Player.UserId) if not Index then return end table.remove(LinkData.AllowedUsers, Index) local Referrer = Players:GetNameFromUserIdAsync(LinkData.Referrer) print(`[LinkTracker]: {Player.Name} joined from {Referrer}'s link.`) end, }) end -- Main: for _, Player in Players:GetPlayers() do task.spawn(OnPlayerAdded, Player) end -- Connections: Players.PlayerAdded:Connect(OnPlayerAdded) -- Binds: CreateLink.OnServerInvoke = function(Player: Player, UserIds: { number }): string? if table.find(RateLimit, Player.UserId) then return end table.insert(RateLimit, Player.UserId) task.delay(10, function() table.remove(RateLimit, table.find(RateLimit, Player.UserId)) end) local Link = LinkTracker:GenerateLink({ Secret = tostring(tick()), Referrer = Player.UserId, Limited = { Uses = #UserIds, Expires = 60 * 60 * 24, }, Custom = { AllowedUsers = UserIds, }, }) return Link end  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/LinkTracker/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/LinkTracker/docs/intro#installation","content":"Wally Head over to the wally installation page "},{"title":"Promo Code","type":0,"sectionRef":"#","url":"/LinkTracker/docs/examples/promo-code","content":"","keywords":""},{"title":"Server​","type":1,"pageTitle":"Promo Code","url":"/LinkTracker/docs/examples/promo-code#server","content":"--[==[ Copyright (C) Re-Sync - All Rights Reserved [init.server.lua]: Example server description [Author(s)]: Vyon - https://github.com/Vyon --]==] -- Services: local Players = game:GetService(&quot;Players&quot;) local DataStoreService = game:GetService(&quot;DataStoreService&quot;) local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) -- Modules: local LinkTracker = require(ReplicatedStorage.Packages.LinkTracker) -- Types: type LinkData = LinkTracker.LinkData type CustomLinkData = LinkData &amp; { Coins: number, AlreadyUsed: { number }, } -- Constants: local USERS_ALLOWED_TO_CREATE_LINKS = { 2394560147, --&gt; VyonEXE (Me) } -- Locals: local CreateLink = Instance.new(&quot;RemoteFunction&quot;) CreateLink.Name = &quot;CreateLink&quot; CreateLink.Parent = ReplicatedStorage local SendChat = Instance.new(&quot;RemoteEvent&quot;) SendChat.Name = &quot;SendChat&quot; SendChat.Parent = ReplicatedStorage -- Variables: local ExampleDataStore = DataStoreService:GetDataStore(&quot;ExampleDataStore&quot;) local RateLimit = {} -- Functions: local function SetupLeaderstats(Player: Player) local Leaderstats = Instance.new(&quot;Folder&quot;) Leaderstats.Name = &quot;leaderstats&quot; Leaderstats.Parent = Player local Coins = Instance.new(&quot;IntValue&quot;) Coins.Name = &quot;Coins&quot; Coins.Parent = Leaderstats Coins.Value = 0 pcall(function(...) Coins.Value = ExampleDataStore:GetAsync(tostring(Player.UserId)) end) end local function OnPlayerAdded(Player: Player) SetupLeaderstats(Player) LinkTracker:OnJoin(Player, { UsableLink = function(Player: Player, LinkData: CustomLinkData) if table.find(LinkData.AlreadyUsed, Player.UserId) then --&gt; Player has already used this link. return false end return true end, ConsumeLink = function(Player: Player, LinkData: CustomLinkData) local Referrer = Players:GetNameFromUserIdAsync(LinkData.Referrer) print(`[LinkTracker]: {Player.Name} joined from {Referrer}'s link.`) table.insert(LinkData.AlreadyUsed, Player.UserId) -- Grant the player their rewards: local Leaderstats = Player:FindFirstChild(&quot;leaderstats&quot;) local Coins = Leaderstats and Leaderstats:FindFirstChild(&quot;Coins&quot;) Coins.Value += LinkData.Coins SendChat:FireAllClients(`{Player.Name} earned {LinkData.Coins} coins through a promo link!`) end, }) end local function OnPlayerRemoving(Player: Player) local Leaderstats = Player:FindFirstChild(&quot;leaderstats&quot;) local Coins = Leaderstats and Leaderstats:FindFirstChild(&quot;Coins&quot;) if not Coins then return end ExampleDataStore:SetAsync(tostring(Player.UserId), Coins.Value) end -- Main: for _, Player in Players:GetPlayers() do task.spawn(OnPlayerAdded, Player) end -- Connections: Players.PlayerAdded:Connect(OnPlayerAdded) Players.PlayerRemoving:Connect(OnPlayerRemoving) -- Binds: CreateLink.OnServerInvoke = function(Player: Player): string? -- Sanity check to make sure exploiters / people who shouldn't be creating links can't. if not table.find(USERS_ALLOWED_TO_CREATE_LINKS, Player.UserId) then return end if table.find(RateLimit, Player.UserId) then return end table.insert(RateLimit, Player.UserId) task.delay(10, function() table.remove(RateLimit, table.find(RateLimit, Player.UserId)) end) local Link = LinkTracker:GenerateLink({ Secret = tostring(tick()), Referrer = Player.UserId, Limited = { Uses = 200, Expires = 60 * 60 * 24 * 7 * 4, --&gt; 1 Month }, Custom = { Coins = 1000, AlreadyUsed = {}, }, }) return Link end  "},{"title":"LinkTracker","type":0,"sectionRef":"#","url":"/LinkTracker/api/LinkTracker","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#types","content":" "},{"title":"GeneratorOptions​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#GeneratorOptions","content":"&lt;/&gt; type GeneratorOptions = { Secret: string?, PlaceId: number?, Referrer: number?, Limited: { Uses: number?, Expires: number?, }?, IsPromo: boolean?, Custom: {[string]: any}?, } Options Secret: Used as a hash randomizer to prevent bruteforcing hashes using generic configs PlaceId: Overrides game.PlaceId when creating the config hash Referrer: The UserId of the person the link is associated with Limited: If provided describes how many times the link can be used or the expiration date in seconds IsPromo: Describes whether the link is being generated for promotional purposes or not Custom: A dictionary of custom link data that can be used to give players certain items / rewards for using the link.  "},{"title":"LinkData​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#LinkData","content":"&lt;/&gt; type LinkData = { Key: string, RemainingUses: number, Referrer: number?, Expires: number?, Item: string?, }   "},{"title":"CallbackOptions<T>​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#CallbackOptions<T>","content":"&lt;/&gt; type CallbackOptions&lt;T&gt; = { NoLink: (Player: Player ) → ()?, InvalidLink: (Player: Player ) → ()?, UsableLink: ( Player: Player , LinkData: T ) → boolean?, ConsumeLink: ( Player: Player , LinkData: T ) → ()?, }  "},{"title":"Functions​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#functions","content":" "},{"title":"GenerateLink​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#GenerateLink","content":"&lt;/&gt; LinkTracker:GenerateLink(Options: GeneratorOptions) → string Create a new deep link based off of the given options. Example usage: local LinkTracker = require(Path.To.LinkTracker) local Link = LinkTracker:GenerateLink({ Secret = tostring(tick()), Limited = { Uses = 5, Expires = 60 * 60, --&gt; 1 hour }, Custom = { Coins = 1000, AlreadyUsed = {}, }, }) print(`Link: {Link}`)   "},{"title":"DeleteLink​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#DeleteLink","content":"&lt;/&gt; LinkTracker:DeleteLink(Options: GeneratorOptions) → string Delete the deep link associated with the given key.  "},{"title":"GetLinkData​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#GetLinkData","content":"&lt;/&gt; LinkTracker:GetLinkData(LinkKey: string) → LinkData? Get the deep link data associated with the given key.  "},{"title":"SetLinkData​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#SetLinkData","content":"&lt;/&gt; LinkTracker:SetLinkData( LinkKey: string, LinkData: LinkData ) → () Used to update link data, uses a generic key (generated or custom) to  "},{"title":"OnJoin​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#OnJoin","content":"&lt;/&gt; LinkTracker:OnJoin( Player: Player , CallbackOptions: CallbackOptions? ) → () Removes the need to manually update old / expired links. This method is used to run tasks within the module. "},{"title":"Creator Code","type":0,"sectionRef":"#","url":"/LinkTracker/docs/examples/creator-code","content":"","keywords":""},{"title":"Server​","type":1,"pageTitle":"Creator Code","url":"/LinkTracker/docs/examples/creator-code#server","content":"--[==[ Copyright (C) Re-Sync - All Rights Reserved [init.server.lua]: Example server description [Author(s)]: Vyon - https://github.com/Vyon --]==] -- Services: local Players = game:GetService(&quot;Players&quot;) local DataStoreService = game:GetService(&quot;DataStoreService&quot;) local HttpService = game:GetService(&quot;HttpService&quot;) local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) -- Modules: local LinkTracker = require(ReplicatedStorage.Packages.LinkTracker) -- Types: type LinkData = LinkTracker.LinkData type CustomLinkData = LinkData &amp; { Coins: number, AlreadyUsed: { number }, } -- Constants: local USERS_ALLOWED_TO_CREATE_LINKS = { 2394560147, --&gt; VyonEXE (Me) } -- Locals: local CreateLink = Instance.new(&quot;RemoteFunction&quot;) CreateLink.Name = &quot;CreateLink&quot; CreateLink.Parent = ReplicatedStorage local SendChat = Instance.new(&quot;RemoteEvent&quot;) SendChat.Name = &quot;SendChat&quot; SendChat.Parent = ReplicatedStorage -- Variables: local ExampleDataStore = DataStoreService:GetDataStore(&quot;ExampleDataStore&quot;) local RateLimit = {} -- Functions: local function SetupLeaderstats(Player: Player) local Leaderstats = Instance.new(&quot;Folder&quot;) Leaderstats.Name = &quot;leaderstats&quot; Leaderstats.Parent = Player local Coins = Instance.new(&quot;IntValue&quot;) Coins.Name = &quot;Coins&quot; Coins.Parent = Leaderstats Coins.Value = 0 pcall(function(...) Coins.Value = ExampleDataStore:GetAsync(tostring(Player.UserId)) end) end local function OnPlayerAdded(Player: Player) SetupLeaderstats(Player) LinkTracker:OnJoin(Player, { UsableLink = function(Player: Player, LinkData: CustomLinkData) if table.find(LinkData.AlreadyUsed, Player.UserId) then --&gt; Player has already used this link. return false end return true end, ConsumeLink = function(Player: Player, LinkData: CustomLinkData) local Referrer = Players:GetNameFromUserIdAsync(LinkData.Referrer) print(`[LinkTracker]: {Player.Name} joined from {Referrer}'s link.`) table.insert(LinkData.AlreadyUsed, Player.UserId) -- Grant the player their rewards: local Leaderstats = Player:FindFirstChild(&quot;leaderstats&quot;) local Coins = Leaderstats and Leaderstats:FindFirstChild(&quot;Coins&quot;) Coins.Value += LinkData.Coins SendChat:FireAllClients(`{Player.Name} earned {LinkData.Coins} by using {Referrer}'s code!`) -- NOTE: Make sure that when using a custom server that you have a -- secure connection (https) that has TLS enabled. CloudFlare provides free -- certificates and you can enable TLS without a problem. -- Make a request to an external server to update how many users the creator has invited. local Endpoint = `https://example.com/creator/{LinkData.Referrer}` --&gt; Change this to whatever your endpoint is HttpService:PostAsync(Endpoint, Player.UserId) end, }) end local function OnPlayerRemoving(Player: Player) local Leaderstats = Player:FindFirstChild(&quot;leaderstats&quot;) local Coins = Leaderstats and Leaderstats:FindFirstChild(&quot;Coins&quot;) if not Coins then return end ExampleDataStore:SetAsync(tostring(Player.UserId), Coins.Value) end -- Main: for _, Player in Players:GetPlayers() do task.spawn(OnPlayerAdded, Player) end -- Connections: Players.PlayerAdded:Connect(OnPlayerAdded) Players.PlayerRemoving:Connect(OnPlayerRemoving) -- Binds: CreateLink.OnServerInvoke = function(Player: Player, UserId: string): string? -- Sanity check to make sure exploiters / people who shouldn't be creating links can't. if not table.find(USERS_ALLOWED_TO_CREATE_LINKS, Player.UserId) then return end if table.find(RateLimit, Player.UserId) then return end table.insert(RateLimit, Player.UserId) task.delay(10, function() table.remove(RateLimit, table.find(RateLimit, Player.UserId)) end) local Link = LinkTracker:GenerateLink({ Secret = tostring(tick()), Referrer = UserId, Limited = { Uses = 500, Expires = 60 * 60 * 24 * 7 * 4, --&gt; 1 Month }, Custom = { Coins = 1000, AlreadyUsed = {}, }, }) return Link end  "}]