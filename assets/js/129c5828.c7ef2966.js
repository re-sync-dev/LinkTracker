"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[811],{4148:e=>{e.exports=JSON.parse('{"functions":[{"name":"_FormatLink","desc":"","params":[{"name":"EncodedOptions","desc":"","lua_type":"string"},{"name":"PlaceIdOverride","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","private":true,"source":{"line":62,"path":"src/init.lua"}},{"name":"_StoreLinkData","desc":"","params":[{"name":"Key","desc":"","lua_type":"string"},{"name":"LinkData","desc":"","lua_type":"LinkData"}],"returns":[],"function_type":"static","private":true,"source":{"line":78,"path":"src/init.lua"}},{"name":"GenerateLink","desc":"Create a new deep link based off of the given options.\\n\\nExample usage:\\n```lua\\nlocal LinkTracker = require(Path.To.LinkTracker)\\n\\nlocal Link = LinkTracker:GenerateLink({\\n\\tSecret = tostring(tick()),\\n\\tLimited = {\\n\\t\\tUses = 5,\\n\\t\\tExpires = 60 * 60, --\x3e 1 hour\\n\\t},\\n\\n\\tCustom = {\\n\\t\\tCoins = 1000,\\n\\t\\tAlreadyUsed = {},\\n\\t},\\n})\\n\\nprint(`Link: {Link}`)\\n```","params":[{"name":"Options","desc":"","lua_type":"GeneratorOptions"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":114,"path":"src/init.lua"}},{"name":"DeleteLink","desc":"Delete the deep link associated with the given key.","params":[{"name":"Options","desc":"","lua_type":"GeneratorOptions"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":174,"path":"src/init.lua"}},{"name":"GetLinkData","desc":"Get the deep link data associated with the given key.","params":[{"name":"LinkKey","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"LinkData?"}],"function_type":"method","source":{"line":191,"path":"src/init.lua"}},{"name":"SetLinkData","desc":"Used to update link data, uses a generic key (generated or custom) to ","params":[{"name":"LinkKey","desc":"","lua_type":"string"},{"name":"LinkData","desc":"","lua_type":"LinkData"}],"returns":[],"function_type":"method","source":{"line":207,"path":"src/init.lua"}},{"name":"OnJoin","desc":"Removes the need to manually update old / expired links. This method\\nis used to run tasks within the module.","params":[{"name":"Player","desc":"","lua_type":"Player"},{"name":"CallbackOptions","desc":"","lua_type":"CallbackOptions?"}],"returns":[],"function_type":"method","source":{"line":220,"path":"src/init.lua"}}],"properties":[],"types":[{"name":"GeneratorOptions","desc":"### Options\\n**Secret:** Used as a hash randomizer to prevent bruteforcing hashes using generic configs  \\n**PlaceId:** Overrides `game.PlaceId` when creating the config hash   \\n**Referrer:** The UserId of the person the link is associated with   \\n**Limited:** If provided describes how many times the link can be used or the expiration date in seconds   \\n**IsPromo:** Describes whether the link is being generated for promotional purposes or not  \\n**Custom:** A dictionary of custom link data that can be used to give players certain items / rewards for using the link.","lua_type":"{Secret: string?, PlaceId: number?,Referrer: number?, Limited: {Uses: number?,Expires: number?,}?,IsPromo: boolean?,Custom: { [string]: any }?,}","source":{"line":27,"path":"src/Types.lua"}},{"name":"LinkData","desc":"","lua_type":"{Key: string,RemainingUses: number,Referrer: number?,Expires: number?,Item: string?,}","source":{"line":51,"path":"src/Types.lua"}},{"name":"CallbackOptions<T>","desc":"","lua_type":"{NoLink: (Player: Player) -> ()?,InvalidLink: (Player: Player) -> ()?,UsableLink: (Player: Player, LinkData: T) -> boolean?,ConsumeLink: (Player: Player, LinkData: T) -> ()?,}","source":{"line":64,"path":"src/Types.lua"}}],"name":"LinkTracker","desc":"Create and monitor deep links to your game\'s servers.","source":{"line":51,"path":"src/init.lua"}}')}}]);