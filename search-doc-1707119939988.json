[{"title":"Installation","type":0,"sectionRef":"#","url":"/LinkTracker/docs/installation/","content":"","keywords":""},{"title":"More information​","type":1,"pageTitle":"Installation","url":"/LinkTracker/docs/installation/#more-information","content":"If you need more info on how to install LinkTracker, there are installation guides for Wally and Studio "},{"title":"Studio Setup","type":0,"sectionRef":"#","url":"/LinkTracker/docs/installation/studio","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Studio Setup","url":"/LinkTracker/docs/installation/studio#prerequisites","content":"Roblox Studio "},{"title":"Installation​","type":1,"pageTitle":"Studio Setup","url":"/LinkTracker/docs/installation/studio#installation","content":""},{"title":"Step 1​","type":1,"pageTitle":"Studio Setup","url":"/LinkTracker/docs/installation/studio#step-1","content":"Go to the releases and download the file named &quot;LinkTracker.rbxm&quot;  "},{"title":"Step 2​","type":1,"pageTitle":"Studio Setup","url":"/LinkTracker/docs/installation/studio#step-2","content":"Drag and drop the &quot;LinkTracker.rbxm&quot; file into studio "},{"title":"Step 2.5 (Can't drag and drop)​","type":1,"pageTitle":"Studio Setup","url":"/LinkTracker/docs/installation/studio#step-25-cant-drag-and-drop","content":"Right click on the workspace and click &quot;Insert from File...&quot;  Afterward locate the downloaded file and click open  the module will be added into the workspace and you can place the module wherever you want. "},{"title":"Known Problems","type":0,"sectionRef":"#","url":"/LinkTracker/docs/bugs","content":"","keywords":""},{"title":"Fix List​","type":1,"pageTitle":"Known Problems","url":"/LinkTracker/docs/bugs#fix-list","content":""},{"title":"Wally Setup","type":0,"sectionRef":"#","url":"/LinkTracker/docs/installation/wally","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Wally Setup","url":"/LinkTracker/docs/installation/wally#prerequisites","content":"AftmanRojoWally "},{"title":"Installation​","type":1,"pageTitle":"Wally Setup","url":"/LinkTracker/docs/installation/wally#installation","content":""},{"title":"Step 1​","type":1,"pageTitle":"Wally Setup","url":"/LinkTracker/docs/installation/wally#step-1","content":"After downloading / installing Aftman, Rojo, and Wally head over to LinkTracker's wally page. You should see a gray-ish box as seen hereClick that box to copy the package install to your clipboard "},{"title":"Step 2​","type":1,"pageTitle":"Wally Setup","url":"/LinkTracker/docs/installation/wally#step-2","content":"Paste the package install text into the dependencies part of your wally.toml file and rename the package with an appropriate casing style.  "},{"title":"Step 3​","type":1,"pageTitle":"Wally Setup","url":"/LinkTracker/docs/installation/wally#step-3","content":"Run the commandwally install "},{"title":"Step 4​","type":1,"pageTitle":"Wally Setup","url":"/LinkTracker/docs/installation/wally#step-4","content":"If you haven't already make sure to add the Packages folder into your default.project.json like this Example code: &quot;Packages&quot;: { &quot;$path&quot;: &quot;Packages&quot; }  "},{"title":"About","type":0,"sectionRef":"#","url":"/LinkTracker/docs/intro","content":"","keywords":""},{"title":"Why use LinkTracker?​","type":1,"pageTitle":"About","url":"/LinkTracker/docs/intro#why-use-linktracker","content":""},{"title":"Analytics​","type":1,"pageTitle":"About","url":"/LinkTracker/docs/intro#analytics","content":"Using LinkTracker can help you understand where your audience comes from whether that be Twitter, TikTok or even a Discord server. "},{"title":"Advertisement​","type":1,"pageTitle":"About","url":"/LinkTracker/docs/intro#advertisement","content":"Instead of paying for a post, developers / project managers can pay per visit or even give the creator a percentage of the amount someone in their audience has spent in game. "},{"title":"Better Q/A testing​","type":1,"pageTitle":"About","url":"/LinkTracker/docs/intro#better-qa-testing","content":"For larger studios Q/A testing is highly recommended, but if the game becomes public in any way friends of testers or random players can join the experience. You can get around this by having a hard coded list of users that can join OR using LinkTracker you can set the amount of users that can join through that link and kick anybody without the link. "},{"title":"User Private Links​","type":1,"pageTitle":"About","url":"/LinkTracker/docs/intro#user-private-links","content":"Roblox has a builtin feature that allows users to invite their friends to a game, but some users might want something a bit more private for games in the RPG / RolePlay genre it could be a QoL feature for a player to send over a link and the player who joins will be able to join for example a guild if they so choose because they used that direct link. "},{"title":"Server Based Games​","type":1,"pageTitle":"About","url":"/LinkTracker/docs/intro#server-based-games","content":"Most games utilize an invite system where you have to join the game and then join the specific server, which while works can become tedious for some players. LinkTracker would be able to create a link for that server that another player could join through. "},{"title":"LinkTracker","type":0,"sectionRef":"#","url":"/LinkTracker/api/LinkTracker","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#types","content":" "},{"title":"GeneratorOptions​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#GeneratorOptions","content":"&lt;/&gt; type GeneratorOptions = { Secret: string?, PlaceId: number?, Referrer: number?, Limited: { Uses: number?, Expires: number?, }?, IsPromo: boolean?, Custom: {[string]: any}?, } Options Secret: Used as a hash randomizer to prevent bruteforcing hashes using generic configs PlaceId: Overrides game.PlaceId when creating the config hash Referrer: The UserId of the person the link is associated with Limited: If provided describes how many times the link can be used or the expiration date in seconds IsPromo: Describes whether the link is being generated for promotional purposes or not Custom: A dictionary of custom link data that can be used to give players certain items / rewards for using the link.  "},{"title":"LinkData​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#LinkData","content":"&lt;/&gt; type LinkData = { Key: string, RemainingUses: number, Referrer: number?, Expires: number?, Item: string?, }   "},{"title":"CallbackOptions<T>​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#CallbackOptions<T>","content":"&lt;/&gt; type CallbackOptions&lt;T&gt; = { NoLink: (Player: Player ) → ()?, InvalidLink: (Player: Player ) → ()?, UsableLink: ( Player: Player , LinkData: T ) → boolean?, ConsumeLink: ( Player: Player , LinkData: T ) → ()?, }  "},{"title":"Functions​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#functions","content":" "},{"title":"GenerateLink​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#GenerateLink","content":"&lt;/&gt; LinkTracker:GenerateLink(Options: GeneratorOptions) → string Create a new deep link based off of the given options. Example usage: local LinkTracker = require(Path.To.LinkTracker) local Link = LinkTracker:GenerateLink({ Secret = tostring(tick()), Limited = { Uses = 5, Expires = 60 * 60, --&gt; 1 hour }, Custom = { Coins = 1000, AlreadyUsed = {}, }, }) print(`Link: {Link}`)   "},{"title":"DeleteLink​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#DeleteLink","content":"&lt;/&gt; LinkTracker:DeleteLink(Options: GeneratorOptions) → string Delete the deep link associated with the given key.  "},{"title":"GetLinkData​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#GetLinkData","content":"&lt;/&gt; LinkTracker:GetLinkData(LinkKey: string) → LinkData? Get the deep link data associated with the given key.  "},{"title":"SetLinkData​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#SetLinkData","content":"&lt;/&gt; LinkTracker:SetLinkData( LinkKey: string, LinkData: LinkData ) → () Used to update link data, uses a generic key (generated or custom) to  "},{"title":"OnJoin​","type":1,"pageTitle":"LinkTracker","url":"/LinkTracker/api/LinkTracker#OnJoin","content":"&lt;/&gt; LinkTracker:OnJoin( Player: Player , CallbackOptions: CallbackOptions? ) → () Removes the need to manually update old / expired links. This method is used to run tasks within the module. "}]